service:
  name: serverless-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs12.x

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  apiGateway:
    minimumCompressionSize: 1024
  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    TODOS_TABLE: Todos-${self:provider.stage}-1
    TODOS_BUCKET: todos-images-${self:provider.stage}-1
    SIGNED_URL_EXPIRATION: 300
    AUTH_JWKS: "https://vku713.auth0.com/.well-known/jwks.json"
    AUTH_CLIENT_ID: "j9orHymagS29sn65A5j2xZs8JySS4upc"
    AUTH_ISSUER: "https://vku713.auth0.com/"
    # TODOS_ID_INDEX: UserIdTodoIdIndex

  # iamRoleStatements:
  #   # TODOS_TABLE
  #   - Effect: Allow
  #     Action:
  #       - dynamodb:Query
  #       - dynamodb:PutItem
  #       - dynamodb:GetItem
  #       - dynamodb:DeleteItem
  #       - dynamodb:UpdateItem
  #     Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  #   # - Effect: Allow
  #   #   Action:
  #   #     - dynamodb:Query
  #   #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_ID_INDEX}

  #   # TODOS_BUCKET
  #   - Effect: Allow
  #     Action:
  #       - s3:PutObject
  #       - s3:GetObject
  #       - s3:DeleteObject
  #     Resource: arn:aws:s3:::${self:provider.environment.TODOS_BUCKET}/*


functions:

  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/create-todo-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          cors: true
          authorizer: Auth
          request:
            schema:
              application/json: ${file(models/update-todo-request.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}

  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:DeleteObject
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_BUCKET}/*

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_BUCKET}/*

resources:
  Resources:

    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Credentials: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosDynamoDBTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
        - AttributeName: userId # partition key
          AttributeType: S
        - AttributeName: todoId # sort key
          AttributeType: S
        KeySchema:
        - AttributeName: userId
          KeyType: HASH
        - AttributeName: todoId
          KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODOS_BUCKET}
        CorsConfiguration:
          CorsRules:
          -
            AllowedOrigins:
            - '*'
            AllowedHeaders:
            - '*'
            AllowedMethods:
            - GET
            - POST
            - PUT
            - DELETE
            - HEAD
            MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: AttachmentsBucket
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_BUCKET}/*'
